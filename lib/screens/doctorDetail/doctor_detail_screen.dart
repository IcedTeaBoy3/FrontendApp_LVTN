import 'package:flutter/material.dart';
import 'package:frontend_app/screens/doctorDetail/widgets/doctor_detail_doctorInfor.dart';
import 'package:frontend_app/screens/doctorDetail/widgets/doctor_detail_schedule.dart';
import 'package:frontend_app/screens/doctorDetail/widgets/doctor_detail_bio.dart';
import 'package:frontend_app/screens/doctorDetail/widgets/doctor_detail_workplace.dart';
import 'package:frontend_app/widgets/clinic_detail_googlemap.dart';
import 'package:frontend_app/screens/doctorDetail/widgets/doctor_review_list.dart';
import 'package:frontend_app/widgets/confirm_dialog.dart';
import 'package:frontend_app/providers/auth_provider.dart';
import 'package:frontend_app/providers/clinic_provider.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';

// üìå ƒê√¢y l√† m√†n h√¨nh chi ti·∫øt b√°c sƒ© c√≥ TabBar b√™n trong
class DoctorDetailScreen extends StatefulWidget {
  final String doctorId;
  final String? from;

  const DoctorDetailScreen({
    super.key,
    required this.doctorId,
    this.from,
  });

  @override
  State<DoctorDetailScreen> createState() => _DoctorDetailScreenState();
}

class _DoctorDetailScreenState extends State<DoctorDetailScreen>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final clinic = context.read<ClinicProvider>().clinic;

    return Scaffold(
      backgroundColor: Theme.of(context).brightness == Brightness.light
          ? Colors.grey.shade200
          : Colors.grey.shade800,
      appBar: AppBar(
        centerTitle: true,
        title: const Text(
          'Chi ti·∫øt b√°c sƒ©',
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () {
            if (widget.from == 'search') {
              context.goNamed('search', queryParameters: {'query': ''});
            } else {
              context.goNamed('home');
            }
          },
        ),
        actions: [
          IconButton(
            onPressed: () {},
            icon: const Icon(Icons.favorite_border, color: Colors.white),
          ),
        ],
      ),
      body: Column(
        children: [
          // üîπ Th√¥ng tin c∆° b·∫£n b√°c sƒ©
          DoctorDetailDoctorInfo(doctorId: widget.doctorId),

          const SizedBox(height: 8),

          // üîπ TabBar n·∫±m ngay trong n·ªôi dung
          Container(
            decoration: BoxDecoration(
              color: Theme.of(context).scaffoldBackgroundColor,
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(12),
                topRight: Radius.circular(12),
              ),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withAlpha(30),
                  blurRadius: 4,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: TabBar(
              controller: _tabController,
              labelColor: Colors.blue,
              unselectedLabelColor: Colors.grey,
              indicatorColor: Colors.blue,
              tabs: const [
                Tab(
                  text: 'Th√¥ng tin b√°c sƒ©',
                  height: 20,
                ),
                Tab(
                  text: 'ƒê√°nh gi√° & B√¨nh lu·∫≠n',
                ),
              ],
            ),
          ),

          // üîπ N·ªôi dung c·ªßa t·ª´ng tab
          Expanded(
            child: TabBarView(
              controller: _tabController,
              children: [
                // ü©∫ Tab 1: Th√¥ng tin b√°c sƒ©
                SingleChildScrollView(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      DoctorDetailSchedule(doctorId: widget.doctorId),
                      ClinicDetailGooglemap(
                        address: clinic?.address ?? 'ƒêang c·∫≠p nh·∫≠t',
                      ),
                      DoctorDetailBio(doctorId: widget.doctorId),
                      const SizedBox(height: 4),
                      DoctorDetailWorkplace(doctorId: widget.doctorId),
                    ],
                  ),
                ),

                // üí¨ Tab 2: ƒê√°nh gi√° & B√¨nh lu·∫≠n (placeholder)
                SingleChildScrollView(
                  child: DoctorReviewList(
                    doctorId: widget.doctorId,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),

      // üîπ N√∫t ƒë·∫∑t kh√°m b√™n d∆∞·ªõi
      bottomNavigationBar: SafeArea(
        child: Container(
          color: Colors.white,
          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
          width: double.infinity,
          child: ElevatedButton(
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.symmetric(vertical: 12),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
            ),
            onPressed: () {
              final isAuthenticated =
                  context.read<AuthProvider>().isAuthenticated;

              if (!isAuthenticated) {
                ConfirmDialog.show(
                  context,
                  title: 'B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p',
                  content: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t l·ªãch kh√°m.',
                  confirmText: 'ƒêƒÉng nh·∫≠p',
                  cancelText: 'H·ªßy',
                  onConfirm: () {
                    context.goNamed(
                      'login',
                      extra: {
                        'from': context.namedLocation(
                          'doctorDetail',
                          pathParameters: {'doctorId': widget.doctorId},
                        ),
                      },
                    );
                  },
                );
              } else {
                context.goNamed(
                  'booking',
                  pathParameters: {'doctorId': widget.doctorId},
                );
              }
            },
            child: const Text(
              "ƒê·∫∑t kh√°m",
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
          ),
        ),
      ),
    );
  }
}
